def func():
    return 1

print(func())

def hello():
    return "Hello!"

print(hello())

greet = hello

print(greet())

del hello

print(greet())
print('\n')

def hello(name = 'jose'):
    print('The hello() function has been executed!')

    def greet():
        return '\t This is the greet() function inside hello!'

    def welcome():
        return '\t This is welcome() inside hello'

    #print(greet())
    #print(welcome())
    #print('THis is the end of the hello() function!')

    print("I am going to return a function!!")

    if name == 'Jose':
        return greet
    else:
        return welcome


#print(hello())

my_new_func = hello('Jose')

print(my_new_func())

def cool():
    def super_cool():
        return "I am very cool!"

some_func = cool()

#some_func
#some_func()


def hello():
    return "Hi Jose"

def other(some_def_func):
    print('Other code runs here!')
    print(some_def_func)

print(other(hello()))


def new_decorator(original_func):
    def wrap_func():
        print("Some extra code, before the original function!")

        original_func()

        print('Some extra code, after the original function!')

    return wrap_func

def func_needs_decorator():
    print("I want to be decorated")

func_needs_decorator()

decorated_func = new_decorator(func_needs_decorator)
decorated_func()


print('\n')

@new_decorator
def func_needs_decorator():
    print("I want to be decorated")

func_needs_decorator()